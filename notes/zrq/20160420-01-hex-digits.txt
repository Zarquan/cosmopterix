#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2016, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -------------------------------------------------------------------------------------------
# Create our 'waitlog' function.
#[user@desktop]

waitlog()
    {
    local name=${1:?Name required}
    local text=${2:?Text required}
    sed -r '/'${text}'/q' <( exec docker logs --follow "${name}" ); kill $! 2> /dev/null
    }

# -------------------------------------------------------------------------------------------
# Test our PostgreSQL container.
#[user@desktop]

    source "${HOME:?}/cosmopterix.settings"
    pushd "${COSMOPTERIX_CODE:?}"

        pushd docker
        
            datadir=$(mktemp -d)
            cp "pgsql/sql/alpha-source.sql" "${datadir}/001.sql"
            cp "data/alpha-source-data.sql" "${datadir}/002.sql"

            docker run \
                --detach \
                --name 'albert' \
                --volume "${datadir}:/database.init/" \
                "cosmopterix/pgsql:9.4-1.0"

            waitlog 'albert' '^Init'

            docker exec \
                --tty \
                --interactive \
                'albert' \
                pgsql-client

                    \pset pager off

                    --
                    -- Numeric literal - FAILS
                    -- Interpreted as the numeric literal zero,
                    -- in a columns named xFF, x41 and xAA.
                    -- SELECT 0xFF ; -- 0
                    -- SELECT 0x41 ; -- 0
                    -- SELECT 0xAA ; -- 0

                    --
                    -- String literal plus - FAILS
                    -- Type missmatch between string and int.
                    -- SELECT x'FF' + 0 ;
                    -- SELECT x'41' + 0 ;
                    -- SELECT x'AA' + 0 ;

                    --
                    -- Explicit type cast to int - works
                    SELECT x'FF'::int ; -- 255
                    SELECT x'41'::int ; --  65
                    SELECT x'AA'::int ; -- 170

                    --
                    -- Bit NOT - works (signed int)
                    SELECT ~ x'FF'::int ; -- -256
                    SELECT ~ x'41'::int ; --  -66
                    SELECT ~ x'AA'::int ; -- -171

                    --
                    -- Bit AND - works
                    SELECT x'FF'::int & x'AA'::int ; -- 170
                    SELECT x'41'::int & x'AA'::int ; --  0
                    SELECT x'AA'::int & x'AA'::int ; -- 170

                    --
                    -- Bit XOR - works
                    SELECT x'FF'::int # x'AA'::int ; --  85
                    SELECT x'41'::int # x'AA'::int ; -- 235
                    SELECT x'AA'::int # x'AA'::int ; --   0

                    --
                    -- Sampling based on id.
                    SELECT id FROM alpha_source WHERE (id & x'0F'::int) = 0  ; --  2 rows
                    SELECT id FROM alpha_source WHERE (id & x'07'::int) = 0  ; --  5 rows
                    SELECT id FROM alpha_source WHERE (id & x'03'::int) = 0  ; -- 11 rows

                \q

        popd
    popd

# -------------------------------------------------------------------------------------------
# Remove the container
#[user@desktop]

    docker rm --volumes $(docker stop 'albert')

# -------------------------------------------------------------------------------------------
# Test our MySQL container.
#[user@desktop]

    #
    # MySQL reference manual
    # 10.1.4 Hexadecimal Literals
    # https://dev.mysql.com/doc/refman/5.7/en/hexadecimal-literals.html

    source "${HOME:?}/cosmopterix.settings"
    pushd "${COSMOPTERIX_CODE:?}"

        pushd docker
        
            datadir=$(mktemp -d)
            cp "mysql/sql/alpha-source.sql" "${datadir}/001.sql"
            cp "data/alpha-source-data.sql" "${datadir}/002.sql"

            docker run \
                --detach \
                --name 'albert' \
                --volume "${datadir}:/database.init/" \
                "cosmopterix/mysql:5.6-1.0"

            waitlog 'albert' '^Init'

            docker exec \
                --tty \
                --interactive \
                'albert' \
                mysql-client

                    select version();
                    -- 5.6.29

                    --
                    -- String literal - FAIL
                    -- Interpreted as the character literal,
                    -- in a columns named x'FF', x'41' and x'AA'.
                    -- SELECT x'FF' ; -- �
                    -- SELECT X'41' ; -- A
                    -- SELECT x'AA' ; -- �

                    --
                    -- Numeric literal - FAILS
                    -- Interpreted as the char value in
                    -- columns named 0xFF, 0x41 and 0xAA.
                    -- SELECT 0xFF  ; -- �
                    -- SELECT 0x41  ; -- A
                    -- SELECT 0xAA  ; -- �

                    --
                    -- Upper case 'X' rejected - FAILS
                    -- SELECT 0XFF  ;
                    -- SELECT 0X41  ;
                    -- SELECT 0XAA  ;

                    --
                    -- String literal plus - works
                    -- Different MySQL:MariaDB
                    SELECT x'FF' + 0 ; -- 255
                    SELECT x'41' + 0 ; --  65
                    SELECT X'AA' + 0 ; -- 170

                    --
                    -- Numeric literal plus - works
                    SELECT 0xFF  + 0 ; -- 255
                    SELECT 0x41  + 0 ; --  65
                    SELECT 0xAA  + 0 ; -- 170

                    --
                    -- CAST string literal - works
                    -- Different MySQL:MariaDB
                    SELECT CAST(x'FF' AS SIGNED) ; -- 255
                    SELECT CAST(x'41' AS SIGNED) ; --  65
                    SELECT CAST(x'AA' AS SIGNED) ; -- 170

                    --
                    -- CAST string literal - works
                    -- Different MySQL:MariaDB
                    SELECT CAST(x'FF' AS UNSIGNED) ; -- 255
                    SELECT CAST(X'41' AS UNSIGNED) ; --  65
                    SELECT CAST(x'AA' AS UNSIGNED) ; -- 170

                    --
                    -- CAST string literal - FAILS
                    -- Different MySQL:MariaDB
                    -- SELECT CAST(x'FF' AS INTEGER) ; -- 255
                    -- SELECT CAST(X'41' AS INTEGER) ; --  65
                    -- SELECT CAST(x'AA' AS INTEGER) ; -- 170

                    --
                    -- CAST numeric literal - works
                    SELECT CAST(0xFF AS SIGNED) ; -- 255
                    SELECT CAST(0x41 AS SIGNED) ; --  65
                    SELECT CAST(0xAA AS SIGNED) ; -- 170

                    --
                    -- CAST numeric literal - works
                    SELECT CAST(0xFF AS UNSIGNED) ; -- 255
                    SELECT CAST(0x41 AS UNSIGNED) ; --  65
                    SELECT CAST(0xAA AS UNSIGNED) ; -- 170

                    --
                    -- CAST numeric literal - fails
                    -- Different MySQL:MariaDB
                    -- SELECT CAST(0xFF AS INTEGER) ;
                    -- SELECT CAST(0x41 AS INTEGER) ;
                    -- SELECT CAST(0xAA AS INTEGER) ;

                    --
                    -- Bit NOT (64bit unsigned)
                    -- Different MySQL:MariaDB
                    SELECT ~ x'FF' ; -- 18446744073709551360
                    SELECT ~ x'41' ; -- 18446744073709551550
                    SELECT ~ x'AA' ; -- 18446744073709551445

                    --
                    -- Bit NOT (64bit unsigned)
                    SELECT ~ 0xFF ; -- 18446744073709551360
                    SELECT ~ 0x41 ; -- 18446744073709551550
                    SELECT ~ 0xAA ; -- 18446744073709551445

                    --
                    -- Bit AND
                    -- Different MySQL:MariaDB
                    SELECT x'FF' & x'AA' ; -- 170
                    SELECT x'41' & x'AA' ; --   0
                    SELECT x'AA' & x'AA' ; -- 170

                    --
                    -- Bit AND
                    SELECT 0xFF & 0xAA ; -- 170
                    SELECT 0x41 & 0xAA ; --   0
                    SELECT 0xAA & 0xAA ; -- 170

                    --
                    -- Bit XOR
                    -- Different MySQL:MariaDB
                    SELECT x'FF' ^ x'AA' ; --  85
                    SELECT x'41' ^ x'AA' ; -- 235
                    SELECT x'AA' ^ x'AA' ; --   0

                    --
                    -- Bit XOR
                    SELECT 0xFF ^ 0xAA ; --  85
                    SELECT 0x41 ^ 0xAA ; -- 235
                    SELECT 0xAA ^ 0xAA ; --   0

                    --
                    -- Sampling based on id - works
                    SELECT id FROM alpha_source WHERE (id & x'0F') = 0  ; --  2 rows
                    SELECT id FROM alpha_source WHERE (id & x'07') = 0  ; --  5 rows
                    SELECT id FROM alpha_source WHERE (id & x'03') = 0  ; -- 11 rows

                    --
                    -- Sampling based on id - works
                    SELECT id FROM alpha_source WHERE (id & 0x0F) = 0  ; --  2 rows
                    SELECT id FROM alpha_source WHERE (id & 0x07) = 0  ; --  5 rows
                    SELECT id FROM alpha_source WHERE (id & 0x03) = 0  ; -- 11 rows

                \q

        popd
    popd

# -------------------------------------------------------------------------------------------
# Remove the container
#[user@desktop]

    docker rm --volumes $(docker stop 'albert')
        
# -------------------------------------------------------------------------------------------
# Test our MariaDB container.
#[user@desktop]

    source "${HOME:?}/cosmopterix.settings"
    pushd "${COSMOPTERIX_CODE:?}"

        pushd docker
        
            datadir=$(mktemp -d)
            cp "mariadb/sql/alpha-source.sql" "${datadir}/001.sql"
            cp "data/alpha-source-data.sql"   "${datadir}/002.sql"

            docker run \
                --detach \
                --name 'albert' \
                --volume "${datadir}:/database.init/" \
                "cosmopterix/mariadb:10.0-1.0"

            waitlog 'albert' '^Init'

            docker exec \
                --tty \
                --interactive \
                'albert' \
                mysql-client

                    select version();
                    -- 10.0.23-MariaDB

                    --
                    -- String literal - FAIL
                    -- Interpreted as the character literal,
                    -- in a columns named x'FF', x'41' and x'AA'.
                    -- SELECT x'FF' ; -- �
                    -- SELECT X'41' ; -- A
                    -- SELECT x'AA' ; -- �

                    --
                    -- Numeric literal - FAILS
                    -- Interpreted as the char value in
                    -- columns named 0xFF, 0x41 and 0xAA.
                    -- SELECT 0xFF  ; -- �
                    -- SELECT 0x41  ; -- A
                    -- SELECT 0xAA  ; -- �

                    --
                    -- Upper case 'X' rejected - FAILS
                    -- SELECT 0XFF  ;
                    -- SELECT 0X41  ;
                    -- SELECT 0XAA  ;

                    --
                    -- String literal plus - FAILS
                    -- Different MySQL:MariaDB
                    -- SELECT x'FF' + 0 ; -- 0
                    -- SELECT X'41' + 0 ; -- 0
                    -- SELECT X'AA' + 0 ; -- 0
                    -- 1 row in set, 1 warning (0.00 sec)

                    --
                    -- Numeric literal plus - works
                    SELECT 0xFF  + 0 ; -- 255
                    SELECT 0x41  + 0 ; --  65
                    SELECT 0xAA  + 0 ; -- 170

                    -- CAST string literal - FAILS
                    -- Different MySQL:MariaDB
                    -- SELECT CAST(x'FF' AS INTEGER) ; -- 0
                    -- SELECT CAST(X'41' AS INTEGER) ; -- 0
                    -- SELECT CAST(x'AA' AS INTEGER) ; -- 0
                    -- 1 row in set, 1 warning (0.00 sec)

                    --
                    -- CAST string literal - FAILS
                    -- Different MySQL:MariaDB
                    -- SELECT CAST(x'FF' AS SIGNED) ; -- 0
                    -- SELECT CAST(X'41' AS SIGNED) ; -- 0
                    -- SELECT CAST(x'AA' AS SIGNED) ; -- 0
                    -- 1 row in set, 1 warning (0.00 sec)

                    --
                    -- CAST string literal - FAILS
                    -- Different MySQL:MariaDB
                    -- SELECT CAST(x'FF' AS UNSIGNED) ; -- 0
                    -- SELECT CAST(X'41' AS UNSIGNED) ; -- 0
                    -- SELECT CAST(x'AA' AS UNSIGNED) ; -- 0
                    -- 1 row in set, 1 warning (0.00 sec)

                    --
                    -- CAST numeric literal - works
                    SELECT CAST(0xFF AS SIGNED) ; -- 255
                    SELECT CAST(0x41 AS SIGNED) ; --  65
                    SELECT CAST(0xAA AS SIGNED) ; -- 170

                    --
                    -- CAST numeric literal - works
                    SELECT CAST(0xFF AS UNSIGNED) ; -- 255
                    SELECT CAST(0x41 AS UNSIGNED) ; --  65
                    SELECT CAST(0xAA AS UNSIGNED) ; -- 170

                    --
                    -- CAST numeric literal - works
                    -- Different MySQL:MariaDB
                    SELECT CAST(0xFF AS INTEGER) ; -- 255
                    SELECT CAST(0x41 AS INTEGER) ; --  65
                    SELECT CAST(0xAA AS INTEGER) ; -- 170

                    --
                    -- Bit NOT - FAILS
                    -- Different MySQL:MariaDB
                    -- SELECT ~ x'FF' ; -- 18446744073709551615
                    -- SELECT ~ x'41' ; -- 18446744073709551615
                    -- SELECT ~ x'AA' ; -- 18446744073709551615
                    -- 1 row in set, 1 warning (0.00 sec)

                    --
                    -- Bit NOT - pass (64bit unsigned)
                    SELECT ~ 0xFF ; -- 18446744073709551360
                    SELECT ~ 0x41 ; -- 18446744073709551550
                    SELECT ~ 0xAA ; -- 18446744073709551445

                    --
                    -- Bit AND - FAILS
                    -- Different MySQL:MariaDB
                    -- SELECT x'FF' & x'AA' ; -- 0
                    -- SELECT x'41' & x'AA' ; -- 0
                    -- SELECT x'AA' & x'AA' ; -- 0
                    -- 1 row in set, 2 warnings (0.00 sec)

                    --
                    -- Bit AND - pass
                    SELECT 0xFF & 0xAA ; -- 170
                    SELECT 0x41 & 0xAA ; --   0
                    SELECT 0xAA & 0xAA ; -- 170

                    --
                    -- Bit XOR - FAILS
                    -- Different MySQL:MariaDB
                    -- SELECT x'FF' ^ x'AA' ; -- 0
                    -- SELECT x'41' ^ x'AA' ; -- 0
                    -- SELECT x'AA' ^ x'AA' ; -- 0
                    -- 1 row in set, 2 warnings (0.00 sec)

                    --
                    -- Bit XOR - pass
                    SELECT 0xFF ^ 0xAA ; --  85
                    SELECT 0x41 ^ 0xAA ; -- 235
                    SELECT 0xAA ^ 0xAA ; --   0

                    --
                    -- Sampling based on id - FAILS
                    -- Different MySQL:MariaDB
                    -- SELECT id FROM alpha_source WHERE (id & x'0F') = 0  ; -- 46 rows
                    -- SELECT id FROM alpha_source WHERE (id & x'07') = 0  ; -- 46 rows
                    -- SELECT id FROM alpha_source WHERE (id & x'03') = 0  ; -- 46 rows
                    46 rows in set, 46 warnings (0.00 sec)

                    --
                    -- Sampling based on id - pass
                    SELECT id FROM alpha_source WHERE (id & 0x0F) = 0  ; --  2 rows
                    SELECT id FROM alpha_source WHERE (id & 0x07) = 0  ; --  5 rows
                    SELECT id FROM alpha_source WHERE (id & 0x03) = 0  ; -- 11 rows

            \q

        popd
    popd

# -------------------------------------------------------------------------------------------
# Remove the container
#[user@desktop]

    docker rm --volumes $(docker stop 'albert')

# -------------------------------------------------------------------------------------------
# Test our Derby container.
#[user@desktop]

    source "${HOME:?}/cosmopterix.settings"
    pushd "${COSMOPTERIX_CODE:?}"

        pushd docker
        
            datadir=$(mktemp -d)
            cp "derby/sql/alpha-source.sql" "${datadir}/001.sql"
            cp "data/alpha-source-data.sql" "${datadir}/002.sql"

            docker run \
                --detach \
                --name 'albert' \
                --volume "${datadir}:/database.init/" \
                "cosmopterix/derby:10.12-1.0"

            waitlog 'albert' '^Init'

            docker exec \
                --tty \
                --interactive \
                'albert' \
                derby-client

                --
                -- No support for bitwise operators or hexadecimal numbers.
                -- 

            quit;

        popd
    popd

# -------------------------------------------------------------------------------------------
# Remove the container
#[user@desktop]

    docker rm --volumes $(docker stop 'albert')

# -------------------------------------------------------------------------------------------
# Test our HyperSQL container.
#[user@desktop]

    source "${HOME:?}/cosmopterix.settings"
    pushd "${COSMOPTERIX_CODE:?}"

        pushd docker
        
            datadir=$(mktemp -d)
            cp "hsqldb/sql/alpha-source.sql" "${datadir}/001.sql"
            cp "data/alpha-source-data.sql" "${datadir}/002.sql"

            docker run \
                --detach \
                --name 'albert' \
                --volume "${datadir}:/database.init/" \
                "cosmopterix/hsqldb:2.3-1.0"

            waitlog 'albert' '^Init'

            docker exec \
                --tty \
                --interactive \
                'albert' \
                hsqldb-client

                    --
                    -- Query without FROM is not supported.
                    -- SELECT 65 ;

                    --
                    -- Decimal literal - pass
                    SELECT 65 FROM alpha_source LIMIT 1 ;

                    --
                    -- Numeric literal - FAIL
                    -- SELECT 0xFF FROM alpha_source LIMIT 1 ; -- 0

                    -- String literal - FAIL
                    -- SELECT x'FF' FROM alpha_source LIMIT 1 ; -- ff

                    -- String literal plus - FAIL
                    -- SELECT x'FF' - 1 FROM alpha_source LIMIT 1 ;
                    SELECT 255 - 1 FROM alpha_source LIMIT 1 ;

                    --
                    -- Sampling based on id - FAIL
                    -- SELECT id FROM alpha_source WHERE (id & 0x0F)  = 0  ;
                    -- SELECT id FROM alpha_source WHERE (id & x'0F') = 0  ;
                    -- SELECT id FROM alpha_source WHERE (id & 16)    = 0  ;
                    -- SELECT id FROM alpha_source WHERE (id < 16) ;

            \q

        popd
    popd

# -------------------------------------------------------------------------------------------
# Remove the container
#[user@desktop]

    docker rm --volumes $(docker stop 'albert')

# -------------------------------------------------------------------------------------------
# Download our Oracle RPM file.
#[user@desktop]

    #
    # Download the zipfile from Oracle.
    # http://www.oracle.com/technetwork/database/database-technologies/express-edition/downloads/index.html

    version=11.2.0-1.0
    rpmfile=oracle-xe-${version}.x86_64.rpm
    zipfile=${rpmfile}.zip
    tarfile=${rpmfile}.tar.gz

    source "${HOME:?}/cosmopterix.settings"
    pushd "${COSMOPTERIX_CODE:?}"

        if [ ! -e 'binaries/oracle' ]
        then
            mkdir -p 'binaries/oracle'
        fi

        pushd binaries
            pushd oracle
                if [ ! -e "${tarfile}" ]
                then
                    if [ ! -e "${rpmfile}" ]
                    then
                        if [ -e "${zipfile}" ]
                        then
                            unzip -j "${zipfile}" '*.rpm'
                        fi
                    fi
                    if [ -e "${rpmfile}" ]
                    then
                        tar -cvzf "${tarfile}" \
                            "${rpmfile}"
                    fi
                fi
            popd
        popd

        if [ ! -e "binaries/oracle/${tarfile}" ]
        then
            echo ""
            echo "-------- --------"
            echo "Please download the Oracle-Xe (eXpress Edition) zipfile"
            echo "Source [http://www.oracle.com/technetwork/database/database-technologies/express-edition/downloads/index.html]"
            echo "Target [$(pwd)]"
            echo "-------- --------"
            echo ""
        fi

        pushd docker
            pushd oracle/oracle-xe/11.2
                if [ ! -d 'rpm' ]
                then
                    mkdir 'rpm'
                fi
                pushd rpm
                    if [ ! -e "${tarfile}" ]
                    then
                        ln "${COSMOPTERIX_CODE:?}/binaries/oracle/${tarfile}" "${tarfile}"
                    fi
                popd
            popd
        popd
    popd

# -----------------------------------------------------
# Build our Oracle containers.
#[user@desktop]

    source "${HOME:?}/cosmopterix.settings"
    pushd "${COSMOPTERIX_CODE:?}"

        pushd docker

            docker build \
                --tag "cosmopterix/oracle-linux:7.2-1.0" \
                oracle/oracle-linux/7.2
            
            docker build \
                --tag "cosmopterix/oracle-xe:11.2-1.0" \
                oracle/oracle-xe/11.2
    
        popd
    popd

    #
    # From MadHead (https://github.com/madhead/docker-oracle-xe)
    # During the configuration of Oracle XE instance two files - init.ora and initXETemp.ora -
    # are overridden with ones from config directory of this repo.
    # The only difference is that memory_target parameter is commented in them to prevent
    # ORA-00845: MEMORY_TARGET not supported on this system error.
    # The only piece of magic in this image :).
    #

    #
    # TODO - Move the create database step from the build time to run time.
    # TODO - Move the database files in a volume.
    # TODO - Configure database using config scripts.

# -------------------------------------------------------------------------------------------
# Run our Oracle container.
#[user@desktop]


    source "${HOME:?}/cosmopterix.settings"
    pushd "${COSMOPTERIX_CODE:?}"

        pushd docker

            datadir=$(mktemp -d)
            cp "oracle/oracle-xe/11.2/sql/alpha-source.sql" "${datadir}/001.sql"
            cp "data/alpha-source-data.sql"  "${datadir}/002.sql"

            docker run \
                --detach \
                --name 'albert' \
                --volume "${datadir}:/database.init/" \
                "cosmopterix/oracle-xe:11.2-1.0"

            docker logs -f 'albert'

                Thu Apr 28 10:52:43 UTC 2016
                Starting Oracle Net Listener.
                Starting Oracle Database 11g Express Edition instance.

            docker exec \
                --tty \
                --interactive \
                'albert' \
                sqlplus

                    # Enter user-name: system
                    # Enter password: oracle

                    # Connected to:
                    # Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production
                    # SQL> 

                    START /database.init/001.sql

                        Table created.
                        Sequence created.
                        Trigger created.

                    START /database.init/002.sql

                        1 row created.
                        1 row created.
                        ....
                        ....
                        1 row created.

                    #
                    # Pagination using ROWNUM.
                    # http://www.oracle.com/technetwork/issue-archive/2006/06-sep/o56asktom-086197.html
                    SELECT
                        id, ra, decl
                    FROM
                        (
                        SELECT
                            id, ra, decl, ROWNUM as rn
                        FROM
                            alpha_source
                        )
                    WHERE rn > 10 AND rn <= 20
                    ;

                    #
                    # Hexadecimal Constants in Oracle
                    # http://www.sqlines.com/oracle/hex_constants
                    SELECT TO_NUMBER('FF', 'xx') FROM alpha_source WHERE id = 1 ;
                    SELECT TO_NUMBER('41', 'xx') FROM alpha_source WHERE id = 1 ;
                    SELECT TO_NUMBER('AA', 'xx') FROM alpha_source WHERE id = 1 ;





                quit

        popd
    popd


# -------------------------------------------------------------------------------------------
# Remove the container
#[user@desktop]

    docker rm --volumes $(docker stop 'albert')

