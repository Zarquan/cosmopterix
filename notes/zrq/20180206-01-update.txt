#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Create our local settings.
#[user@desktop]

    if [ ! -e "${HOME:?}/cosmopterix.settings" ]
    then
        cat > "${HOME:?}/cosmopterix.settings" << EOF
COSMOPTERIX_HOME=${HOME:?}/cosmopterix
COSMOPTERIX_CODE=\${COSMOPTERIX_HOME:?}/github.zrq
EOF
    fi

# -----------------------------------------------------
# Remove existing containers and images.
#[user@desktop]

    docker rm -v $(docker stop $(docker ps -aq))

    docker rmi -f $(docker images -q)

# -------------------------------------------------------------------------------------------
# Create our 'waitlog' function.
#[user@desktop]

    waitlog()
        {
        local name=${1:?Name required}
        local text=${2:?Text required}
        sed -r '/'${text}'/q' <( exec docker logs --follow "${name}" ); kill $! 2> /dev/null
        }

# -----------------------------------------------------
# Update our Fedora image.
#[user@laptop]

    buildtag=20180206

    source "${HOME:?}/cosmopterix.settings"
    pushd "${COSMOPTERIX_CODE:?}"

        pushd docker
            docker build \
                --tag "cosmopterix/fedora:latest" \
                --tag "cosmopterix/fedora:${buildtag:?}" \
                fedora

        popd
    popd

# -----------------------------------------------------
# Update our PostgreSQL images.
#[user@desktop]

    source "${HOME:?}/cosmopterix.settings"
    pushd "${COSMOPTERIX_CODE:?}"

        pushd docker

            docker build \
                --tag "cosmopterix/pgsql:latest" \
                --tag "cosmopterix/pgsql:${buildtag:?}" \
                --tag "cosmopterix/pgsql-base:latest" \
                --tag "cosmopterix/pgsql-base:${buildtag:?}" \
                pgsql/base

            docker build \
                --tag "cosmopterix/pgsql-test:latest" \
                --tag "cosmopterix/pgsql-test:${buildtag:?}" \
                pgsql/test

        popd
    popd

# -------------------------------------------------------------------------------------------
# Test our PostgreSQL container.
#[user@desktop]

    docker run \
        --detach \
        --name 'pgsql' \
       "cosmopterix/pgsql-test:${buildtag:?}"

    waitlog 'pgsql' 'OKGO'

    docker exec \
        --tty \
        --interactive \
        'pgsql' \
        'pgsql-client'

        SELECT version() ;

            PostgreSQL 9.6.6 on x86_64-redhat-linux-gnu, compiled by gcc (GCC) 7.2.1 20170915 (Red Hat 7.2.1-2), 64-bit

        SELECT
            id,
            random()
        FROM
            alpha_source            
        ORDER BY
            id
        LIMIT
            4
            ;

             id |       random       
            ----+--------------------
              1 |   0.37916271854192
              2 |  0.604296837933362
              3 |  0.062337483279407
              4 | 0.0407298766076565

        \q

# -----------------------------------------------------
# Update our MySQL images.
#[user@desktop]

    source "${HOME:?}/cosmopterix.settings"
    pushd "${COSMOPTERIX_CODE:?}"

        pushd docker

            docker build \
                --tag "cosmopterix/mysql:latest" \
                --tag "cosmopterix/mysql:20180206" \
                --tag "cosmopterix/mysql-base:latest" \
                --tag "cosmopterix/mysql-base:20180206" \
                mysql/base

            docker build \
                --tag "cosmopterix/mysql-test:latest" \
                --tag "cosmopterix/mysql-test:20180206" \
                mysql/test

        popd
    popd


# -------------------------------------------------------------------------------------------
# Test our MySQL container.
#[user@desktop]

    docker run \
        --detach \
        --name 'mysql' \
       "cosmopterix/mysql-test:${buildtag:?}"

    waitlog 'mysql' 'OKGO'

    docker exec \
        --tty \
        --interactive \
        'mysql' \
        'mysql-client'

    #
    # Still fails.
    # Configuring admin account [root]
    # ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)
    #
    
    #
    # Probable cause
    # https://planet.mysql.com/entry/?id=5989901
    #

    #
    # Possible clues to help fix.
    # https://github.com/sclorg/mysql-container/blob/master/root-common/usr/bin/run-mysqld
    #

# -----------------------------------------------------
# Update our Mariadb images.
#[user@desktop]

    source "${HOME:?}/cosmopterix.settings"
    pushd "${COSMOPTERIX_CODE:?}"

        pushd docker

            docker build \
                --tag "cosmopterix/mariadb:latest" \
                --tag "cosmopterix/mariadb:20180206" \
                --tag "cosmopterix/mariadb-base:latest" \
                --tag "cosmopterix/mariadb-base:20180206" \
                mariadb/base

            docker build \
                --tag "cosmopterix/mariadb-test:latest" \
                --tag "cosmopterix/mariadb-test:20180206" \
                mariadb/test

        popd
    popd

# -------------------------------------------------------------------------------------------
# Test our Mariadb container.
#[user@desktop]

    docker run \
        --detach \
        --name 'mariadb' \
       'cosmopterix/mariadb-test:20180206'

    waitlog 'mariadb' 'OKGO'

    docker exec \
        --tty \
        --interactive \
        'mariadb' \
        'mariadb-client'

        SELECT
            version()
            ;

            +-----------------+
            | version()       |
            +-----------------+
            | 10.2.12-MariaDB |
            +-----------------+

        SELECT
            id,
            rand()
        FROM
            alpha_source            
        ORDER BY
            id
        LIMIT
            4
            ;

            +----+---------------------+
            | id | rand()              |
            +----+---------------------+
            |  1 |  0.7985201150165127 |
            |  2 |  0.7290922223861257 |
            |  3 | 0.24990079761473535 |
            |  4 | 0.06222735164894476 |
            +----+---------------------+

        \q
        
# -----------------------------------------------------
# Update our Derby images.
#[user@virtual]

    source "${HOME:?}/cosmopterix.settings"
    pushd "${COSMOPTERIX_CODE:?}"

        pushd docker

            docker build \
                --tag "cosmopterix/java:latest" \
                --tag "cosmopterix/java:20180206" \
                java

            docker build \
                --tag "cosmopterix/derby:latest" \
                --tag "cosmopterix/derby:20180206" \
                --tag "cosmopterix/derby-base:latest" \
                --tag "cosmopterix/derby-base:20180206" \
                derby/base

            docker build \
                --tag "cosmopterix/derby-test:latest" \
                --tag "cosmopterix/derby-test:20180206" \
                derby/test

        popd
    popd

# -------------------------------------------------------------------------------------------
# Test our Derby container.
#[user@virtual]

    docker run \
        --detach \
        --name 'derby' \
       'cosmopterix/derby-test:20180206'

    waitlog 'derby' 'OKGO'

    docker exec \
        --tty \
        --interactive \
        'derby' \
        'derby-client'


        SELECT
            id,
            random()
        FROM
            alpha_source            
        ORDER BY
            id
        FETCH FIRST
            4
        ROWS ONLY
            ;

            ------------------------------------
            1          |0.9635556410929079      
            2          |0.8178823097664045      
            3          |0.9712503399435956      
            4          |0.45863690322953377     


# -----------------------------------------------------
# Update our HSQLDB images.
#[user@virtual]

    source "${HOME:?}/cosmopterix.settings"
    pushd "${COSMOPTERIX_CODE:?}"

        pushd docker

            docker build \
                --tag "cosmopterix/hsqldb:latest" \
                --tag "cosmopterix/hsqldb-base:20180206" \
                --tag "cosmopterix/hsqldb-base:latest" \
                --tag "cosmopterix/hsqldb-base:20180206" \
                hsqldb/base

            docker build \
                --tag "cosmopterix/hsqldb-test:latest" \
                --tag "cosmopterix/hsqldb-test:20180206" \
                hsqldb/test

        popd
    popd


# -------------------------------------------------------------------------------------------
# Test our HSQLDB in-memory database.
#[user@virtual]

    docker run \
        --detach \
        --name 'hsqldb-mem' \
        --env 'servertype=mem' \
       'cosmopterix/hsqldb-test:20180206'

    waitlog 'hsqldb-mem' 'OKGO'

    docker exec \
        --tty \
        --interactive \
        'hsqldb-mem' \
        'hsqldb-client'

        --
        -- Load our test data
        \i /database.init/alpha-source.sql


        SELECT
            id,
            rand()
        FROM
            alpha_source            
        ORDER BY
            id
        LIMIT
            4
            ;

            --  --------------------
             0  0.6366858296380388E0
             1   0.830028533297709E0
             2  0.7905198683589413E0
             3  0.8398019225440426E0


        Ctrl^C

# -------------------------------------------------------------------------------------------
# Test our HSQLDB container.
#[user@virtual]

    docker run \
        --detach \
        --name 'hsqldb' \
       'cosmopterix/hsqldb-test:20180206'

    waitlog 'hsqldb' 'OKGO'

    docker exec \
        --tty \
        --interactive \
        'hsqldb' \
        'hsqldb-client'

        SELECT
            id,
            rand()
        FROM
            alpha_source            
        ORDER BY
            id
        LIMIT
            4
            ;

            --  ---------------------
             0  0.49606534257424617E0
             1   0.6112331754696813E0
             2   0.7388564358392851E0
             3    0.909650613305332E0


        Ctrl^C

# -----------------------------------------------------
# Push our new images.
#[user@virtual]

    source "${HOME}/secret.sh"

    docker login \
        --username $(secret docker.io.user) \
        --password $(secret docker.io.pass)

    docker push "cosmopterix/fedora:latest"
    docker push "cosmopterix/fedora:${buildtag:?}"

    docker push "cosmopterix/java:latest"
    docker push "cosmopterix/java:${buildtag:?}"


    docker push "cosmopterix/hsqldb:latest"
    docker push "cosmopterix/hsqldb:${buildtag:?}"

    docker push "cosmopterix/hsqldb-base:latest"
    docker push "cosmopterix/hsqldb-base:${buildtag:?}"

    docker push "cosmopterix/hsqldb-test:latest"
    docker push "cosmopterix/hsqldb-test:${buildtag:?}"


    docker push "cosmopterix/derby:latest"
    docker push "cosmopterix/derby:${buildtag:?}"

    docker push "cosmopterix/derby-base:latest"
    docker push "cosmopterix/derby-base:${buildtag:?}"

    docker push "cosmopterix/derby-test:latest"
    docker push "cosmopterix/derby-test:${buildtag:?}"


    docker push "cosmopterix/pgsql:latest"
    docker push "cosmopterix/pgsql:${buildtag:?}"

    docker push "cosmopterix/pgsql-base:latest"
    docker push "cosmopterix/pgsql-base:${buildtag:?}"

    docker push "cosmopterix/pgsql-test:latest"
    docker push "cosmopterix/pgsql-test:${buildtag:?}"


    docker push "cosmopterix/mariadb:latest"
    docker push "cosmopterix/mariadb:${buildtag:?}"

    docker push "cosmopterix/mariadb-base:latest"
    docker push "cosmopterix/mariadb-base:${buildtag:?}"

    docker push "cosmopterix/mariadb-test:latest"
    docker push "cosmopterix/mariadb-test:${buildtag:?}"





